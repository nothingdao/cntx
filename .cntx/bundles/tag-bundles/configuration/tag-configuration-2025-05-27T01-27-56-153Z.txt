<?xml version="1.0" encoding="UTF-8"?>
<bundle id="tag-configuration-2025-05-27T01-27-56-153Z" created="2025-05-27T01:27:56.153Z" fileCount="19" type="tag-derived">
  
  <metadata>
    <bundleType>tag-derived</bundleType>
    <derivedFromTag>configuration</derivedFromTag>
    <description>Auto-generated bundle for files tagged with "configuration"</description>
    <totalFiles>19</totalFiles>
    <createdAt>2025-05-27T01:27:56.153Z</createdAt>
  </metadata>

  <documents>
    
    <document>
      <source>.cursor/rules</source>
      <tags>configuration,external-apis</tags>
      <metadata>
        <size>8980</size>
        <lastModified>2025-05-26T20:50:24.992Z</lastModified>
        <extension>cursor/rules</extension>
        <directory>.cursor</directory>
      </metadata>
      <content># Cntx-UI Rules

## Project Overview

This is a React + TypeScript application that helps developers organize, tag, and bundle codebase files for AI tools. It uses the File System Access API to work directly with local files without uploads.

## Core Technologies &amp; Patterns

### Tech Stack

- React 18 with TypeScript (strict mode)
- Vite for build tooling
- Tailwind CSS + shadcn/ui components
- File System Access API for file operations
- React Context for state management
- Express.js server for NPX package delivery

### Architecture Principles

- Context-based state management (no Redux/Zustand for global state)
- Functional components with hooks only
- Custom hooks for reusable logic
- Proper TypeScript types and interfaces
- File System Access API integration patterns

## Code Style &amp; Standards

### TypeScript

- Always use strict TypeScript - no `any` types
- Define proper interfaces for all data structures
- Use explicit return types for public functions
- Handle File System Access API errors with proper try/catch
- Use type guards for browser API availability

### React Patterns

- Functional components with hooks only (no class components)
- Use React.memo() for performance optimization when needed
- Custom hooks should start with `use` and follow React hooks rules
- Proper dependency arrays in useEffect/useCallback/useMemo
- Context providers should handle loading and error states

### File Organization

- Components in PascalCase: `DirectoryTree.tsx`
- Utilities in kebab-case: `file-utils.ts`
- Contexts end with `Context.tsx`
- Types in `types.ts` files
- Constants in `constants/index.ts`

### Naming Conventions

- Component props interfaces: `ComponentNameProps`
- Context types: `ComponentNameContextType`
- Utility functions: descriptive camelCase
- File paths: use forward slashes and normalize paths
- Bundle IDs: `bundle-timestamp-random` or `master-timestamp`

## File System Access API Guidelines

### Security &amp; Permissions

- Always check for File System Access API support
- Handle permission denial gracefully
- Use try/catch for all file operations
- Never assume file/directory exists - always check

### File Operations Patterns

```typescript
// Always wrap in try/catch
try {
  const dirHandle = await window.showDirectoryPicker({ mode: &#39;readwrite&#39; })
  // Operations...
} catch (error) {
  if (error.name === &#39;AbortError&#39;) {
    // User cancelled
  } else {
    // Handle other errors
  }
}

// Check file existence before operations
try {
  await dirHandle.getFileHandle(&#39;filename&#39;)
} catch (error) {
  if (error.name === &#39;NotFoundError&#39;) {
    // File doesn&#39;t exist
  }
}
```

### Performance Considerations

- Use async generators for large directory processing
- Implement ignore patterns to skip unnecessary files
- Cache file handles when possible
- Use AbortController for cancellable operations

## State Management Patterns

### Context Architecture

- Each major feature has its own context (Directory, File, Bundle, Tag)
- Contexts handle their own loading/error states
- Use context composition in `CntxProvider.tsx`
- Avoid prop drilling - use context for shared state

### State Updates

- Always preserve existing data when updating state
- Use functional updates for complex state changes
- Handle race conditions in async operations
- Implement optimistic updates where appropriate

### Tag System

- Tags are stored in `.cntx/state/file.json`
- Never filter out files with tags during state operations
- Always preserve existing tags when updating file state
- Use proper tag color validation (hex colors)

## Bundle System

### Bundle Creation

- Use XML format with proper escaping
- Include file content, metadata, and tags
- Generate unique bundle IDs with timestamps
- Save both bundle file and manifest
- Master bundles go in `bundles/master/` subdirectory

### Bundle Analysis

- Calculate staleness based on file modification times
- Track which files have changed since bundle creation
- Provide meaningful progress feedback during creation
- Handle large bundles efficiently

## UI/UX Guidelines

### Component Design

- Use shadcn/ui components as base
- Implement proper loading states for async operations
- Show progress for long-running operations
- Provide clear error messages and recovery options
- Use tooltips for complex features

### Accessibility

- Proper ARIA labels for interactive elements
- Keyboard navigation support
- Screen reader friendly file trees
- Color contrast compliance
- Focus management in modals/dialogs

### Performance

- Virtualize large file lists when needed
- Implement proper memo patterns
- Use React.Suspense for code splitting
- Optimize re-renders with proper dependencies

## Error Handling

### File System Errors

- Handle NotFoundError (file/directory doesn&#39;t exist)
- Handle NotAllowedError (permission denied)
- Handle AbortError (user cancelled operation)
- Handle QuotaExceededError (storage limits)

### User Experience

- Show specific error messages, not generic &quot;Something went wrong&quot;
- Provide actionable recovery steps
- Log errors for debugging but don&#39;t expose internals to users
- Use toast notifications for operation feedback

## Testing Considerations

### Browser Compatibility

- File System Access API only works in Chromium browsers
- Gracefully degrade functionality in unsupported browsers
- Test in Chrome, Edge, and Opera
- Provide clear browser compatibility messaging

### Development Testing

- Test with various project structures
- Test ignore patterns thoroughly
- Test tag persistence across app restarts
- Test bundle creation with large files
- Test error scenarios (permissions, disk space, etc.)

## NPX Package Guidelines

### Server Implementation

- Express server serves built React app
- Proper CORS headers for File System Access API
- Graceful shutdown handling
- Port conflict detection and messaging
- ASCII art banner and helpful startup messages

### Package Distribution

- Include only necessary files in NPM package
- Proper binary configuration in package.json
- Clear installation and usage instructions
- Version management and changelog

## AI Integration Features

### Cursor Rules Integration

- Import existing `.cursorrules` files
- Merge with cntx semantic organization
- Export unified AI context
- Store in `.cntx/config/ai-instructions.json`

### Bundle Format for AI

- XML structure optimized for AI consumption
- Include directory tree visualization
- Preserve file relationships and context
- Tag-based organization for semantic understanding

## Security Best Practices

### File Access

- Validate file paths and prevent directory traversal
- Sanitize file content before processing
- Limit file sizes for bundle operations
- Respect user&#39;s ignore patterns

### Data Storage

- Store configuration in project `.cntx` directory
- Never store sensitive information
- Use proper JSON validation for config files
- Handle corrupted state files gracefully

## Development Workflow

### Code Organization

- Keep components focused and single-purpose
- Extract complex logic into custom hooks
- Use proper TypeScript generics for reusable code
- Document complex algorithms and business logic

### Debugging

- Use descriptive console.log messages with emoji prefixes
- Implement proper error boundaries
- Use React DevTools for component debugging
- Monitor File System API calls in browser DevTools

### Git Integration

- Commit `.cntx` directory for team AI context sharing
- Proper gitignore for development files
- Meaningful commit messages following conventional commits
- Feature branch workflow for new functionality

## Common Patterns to Follow

### Context Updates

```typescript
// Always preserve existing state
const updateState = useCallback((updates: Partial&lt;State&gt;) =&gt; {
  setState((current) =&gt; ({ ...current, ...updates }))
}, [])
```

### File Processing

```typescript
// Handle ignore patterns properly
const shouldIgnore = (path: string) =&gt; {
  return ignorePatterns.some((pattern) =&gt; {
    if (pattern.startsWith(&#39;*.&#39;)) {
      return path.endsWith(pattern.slice(1))
    }
    return path.includes(pattern)
  })
}
```

### Error Boundaries

```typescript
// Provide meaningful error context
catch (error) {
  console.error(`Failed to ${operation}:`, error);
  setError(`Unable to ${operation}. ${getHelpfulMessage(error)}`);
}
```

## When Making Changes

1. **File System Operations**: Always test with different file structures and edge cases
2. **State Updates**: Ensure tag preservation and data consistency
3. **UI Changes**: Test with various screen sizes and accessibility tools
4. **Bundle Creation**: Verify XML format and proper escaping
5. **Context Changes**: Check for proper provider composition and cleanup
6. **Error Handling**: Test error scenarios and recovery paths

Remember: This app helps developers create better AI context, so the code itself should be exemplary and well-documented for AI tools to understand and work with effectively.
</content>
    </document>

    <document>
      <source>src/contexts/ProjectConfigContext.tsx</source>
      <tags>state-context,configuration</tags>
      <metadata>
        <size>5497</size>
        <lastModified>2025-05-23T22:42:10.887Z</lastModified>
        <extension>tsx</extension>
        <directory>src/contexts</directory>
      </metadata>
      <content>// src/contexts/ProjectConfigContext.tsx - Enhanced with project metadata
import React, { createContext, useState, useCallback, useContext, useEffect } from &#39;react&#39;;
import type { ProjectConfigContextType, ProjectMetadata } from &#39;./types&#39;;
import { DEFAULT_BUNDLE_IGNORE } from &#39;@/constants&#39;;
import { initializeProject, loadPatternIgnore, loadProjectMetadata, saveProjectMetadata } from &#39;@/utils/project-utils&#39;;
import { useDirectory } from &#39;./DirectoryContext&#39;;
import { useFiles } from &#39;./FileContext&#39;;

const ProjectConfigContext = createContext&lt;ProjectConfigContextType&gt;({
  ignorePatterns: DEFAULT_BUNDLE_IGNORE,
  updateIgnorePatterns: () =&gt; { },
  isProjectInitialized: false,
  initializeProject: async () =&gt; { },
  projectMetadata: null,
  updateProjectMetadata: async () =&gt; { },
});

export function ProjectConfigProvider({ children }: { children: React.ReactNode }) {
  const [ignorePatterns, setIgnorePatterns] = useState&lt;string[]&gt;([]);
  const [isProjectInitialized, setIsProjectInitialized] = useState(false);
  const [projectMetadata, setProjectMetadata] = useState&lt;ProjectMetadata | null&gt;(null);
  const { directoryHandle } = useDirectory();
  const { refreshFiles } = useFiles();

  // Check if project is initialized when directory changes
  useEffect(() =&gt; {
    const checkInitialization = async () =&gt; {
      if (!directoryHandle) {
        setIsProjectInitialized(false);
        setProjectMetadata(null);
        return;
      }

      try {
        const cntxDir = await directoryHandle.getDirectoryHandle(&#39;.cntx&#39;);
        console.log(&quot;Loading patterns from pattern-ignore.ts...&quot;);
        const patterns = await loadPatternIgnore(cntxDir);
        console.log(&quot;ProjectConfigContext - Loaded patterns:&quot;, patterns);

        // Load project metadata
        const metadata = await loadProjectMetadata(cntxDir);
        console.log(&quot;ProjectConfigContext - Loaded project metadata:&quot;, metadata);

        // Set the patterns and metadata in state
        setIgnorePatterns(patterns);
        setProjectMetadata(metadata);
        setIsProjectInitialized(true);
      } catch (error) {
        console.error(&#39;Project not initialized or error loading config:&#39;, error);
        setIsProjectInitialized(false);
        setProjectMetadata(null);
      }
    };

    checkInitialization();
  }, [directoryHandle]);

  const updateIgnorePatterns = useCallback(async (patterns: string[]) =&gt; {
    if (!directoryHandle) return;

    try {
      // Update state immediately
      setIgnorePatterns(patterns);
      console.log(&quot;Setting ignorePatterns state to:&quot;, patterns);

      // Get the config directory handle
      const cntxDir = await directoryHandle.getDirectoryHandle(&#39;.cntx&#39;);
      const configDir = await cntxDir.getDirectoryHandle(&#39;config&#39;);

      // Create a very simple format that&#39;s easy to parse
      const content = `// .cntx/config/pattern-ignore.ts
export default [
  ${patterns.map(p =&gt; `&#39;${p}&#39;`).join(&#39;,\n  &#39;)}
] as const;
`;

      console.log(&quot;Writing pattern file with content:&quot;, content);

      // Write to file
      const ignoreHandle = await configDir.getFileHandle(&#39;pattern-ignore.ts&#39;, {
        create: true,
      });
      const writable = await ignoreHandle.createWritable();
      await writable.write(content);
      await writable.close();

      // Force refresh files with the new patterns
      setTimeout(() =&gt; refreshFiles(), 100);
    } catch (error) {
      console.error(&#39;Error updating ignore patterns:&#39;, error);
    }
  }, [directoryHandle, refreshFiles]);

  const updateProjectMetadata = useCallback(async (metadata: ProjectMetadata) =&gt; {
    if (!directoryHandle) return;

    try {
      const cntxDir = await directoryHandle.getDirectoryHandle(&#39;.cntx&#39;);

      // Save the metadata
      await saveProjectMetadata(cntxDir, metadata);

      // Update state
      setProjectMetadata(metadata);

      console.log(&#39;✅ Project metadata updated:&#39;, metadata);
    } catch (error) {
      console.error(&#39;Error updating project metadata:&#39;, error);
    }
  }, [directoryHandle]);

  const initProject = useCallback(async () =&gt; {
    if (!directoryHandle) {
      throw new Error(&#39;No directory handle provided&#39;);
    }

    try {
      const { cntxDir } = await initializeProject(directoryHandle);

      // Load ignore patterns
      const patterns = await loadPatternIgnore(cntxDir);
      setIgnorePatterns(patterns);

      // Load or create default project metadata
      const defaultMetadata: ProjectMetadata = {
        name: directoryHandle.name || &#39;Untitled Project&#39;,
        description: &#39;&#39;,
        version: &#39;1.0.0&#39;,
        author: &#39;&#39;,
        lastUpdated: new Date().toISOString(),
      };

      await saveProjectMetadata(cntxDir, defaultMetadata);
      setProjectMetadata(defaultMetadata);

      setIsProjectInitialized(true);
    } catch (error) {
      console.error(&#39;Project initialization failed:&#39;, error);
      setIsProjectInitialized(false);
      throw error;
    }
  }, [directoryHandle]);

  const value = {
    ignorePatterns,
    updateIgnorePatterns,
    isProjectInitialized,
    initializeProject: initProject,
    projectMetadata,
    updateProjectMetadata,
  };

  return (
    &lt;ProjectConfigContext.Provider value={value}&gt;
      {children}
    &lt;/ProjectConfigContext.Provider&gt;
  );
}

export function useProjectConfig() {
  const context = useContext(ProjectConfigContext);
  if (!context) {
    throw new Error(&#39;useProjectConfig must be used within a ProjectConfigProvider&#39;);
  }
  return context;
}
</content>
    </document>

    <document>
      <source>src/constants/index.ts</source>
      <tags>configuration,business-logic</tags>
      <metadata>
        <size>1653</size>
        <lastModified>2025-05-22T01:02:49.262Z</lastModified>
        <extension>ts</extension>
        <directory>src/constants</directory>
      </metadata>
      <content>// src/constants/index.ts

export const DEFAULT_BUNDLE_IGNORE = [
  // Directories
  &#39;node_modules&#39;,
  &#39;.git&#39;,
  &#39;dist&#39;,
  &#39;build&#39;,
  &#39;coverage&#39;,
  &#39;.next&#39;,
  &#39;.cache&#39;,
  &#39;.netlify&#39;,

  // Package files
  &#39;package-lock.json&#39;,
  &#39;yarn.lock&#39;,

  // System files
  &#39;.DS_Store&#39;,
  &#39;Thumbs.db&#39;,

  // Media files
  &#39;*.mp3&#39;,
  &#39;*.mp4&#39;,
  &#39;*.wav&#39;,
  &#39;*.ogg&#39;,
  &#39;*.m4a&#39;,
  &#39;*.flac&#39;,
  &#39;*.jpg&#39;,
  &#39;*.jpeg&#39;,
  &#39;*.png&#39;,
  &#39;*.gif&#39;,
  &#39;*.webp&#39;,
  &#39;*.svg&#39;,
  &#39;*.ico&#39;,
  &#39;*.pxd&#39;,

  // Documents and archives
  &#39;*.pdf&#39;,
  &#39;*.doc&#39;,
  &#39;*.docx&#39;,
  &#39;*.zip&#39;,
  &#39;*.tar&#39;,
  &#39;*.gz&#39;,
  &#39;*.rar&#39;,

  // Other
  &#39;example-project&#39;,
  &#39;issues&#39;,
]

export const DEFAULT_TAGS: Record&lt;
  string,
  { color: string; description: string }
&gt; = {
  application: {
    color: &#39;#0ea5e9&#39;, // sky-500
    description: &#39;Main application code and logic&#39;,
  },
  infrastructure: {
    color: &#39;#f97316&#39;, // orange-500
    description: &#39;Deployment, CI/CD, infrastructure-as-code&#39;,
  },
  configuration: {
    color: &#39;#94a3b8&#39;, // slate-400
    description: &#39;Build, tooling, and environment configuration&#39;,
  },
  documentation: {
    color: &#39;#8b5cf6&#39;, // violet-500
    description: &#39;Documentation, markdown files, and comments&#39;,
  },
  testing: {
    color: &#39;#22c55e&#39;, // green-500
    description: &#39;Unit tests, integration tests, and mocks&#39;,
  },
  assets: {
    color: &#39;#78716c&#39;, // stone-500
    description: &#39;Static files, images, media, and fonts&#39;,
  },
  libraries: {
    color: &#39;#ec4899&#39;, // pink-500
    description: &#39;Shared utilities, helper functions, and internal packages&#39;,
  },
  types: {
    color: &#39;#6366f1&#39;, // indigo-500
    description: &#39;Type definitions and interfaces&#39;,
  },
}
</content>
    </document>

    <document>
      <source>src/components/ConfigPanel.tsx</source>
      <tags>ui-components,configuration</tags>
      <metadata>
        <size>9863</size>
        <lastModified>2025-05-26T20:46:58.098Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components</directory>
      </metadata>
      <content>// Updated src/components/ConfigPanel.tsx
import { useState, useEffect } from &#39;react&#39;;
import { Button } from &quot;@/components/ui/button&quot;;
import { Card, CardHeader, CardTitle, CardContent } from &quot;@/components/ui/card&quot;;
import { Settings, Plus, X, FolderOpen, FileText, Zap } from &quot;lucide-react&quot;;
import { Input } from &quot;@/components/ui/input&quot;;
import { Label } from &quot;@/components/ui/label&quot;;
import { Textarea } from &quot;@/components/ui/textarea&quot;;
import { useProjectConfig } from &#39;@/contexts/ProjectConfigContext&#39;;
import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;;
import { Separator } from &quot;@/components/ui/separator&quot;;
import { useDirectory } from &#39;@/contexts/DirectoryContext&#39;;
import { Tabs, TabsContent, TabsList, TabsTrigger } from &quot;@/components/ui/tabs&quot;;
import { CursorRulesPanel } from &#39;./CursorRulesPanel&#39;;

export function ConfigPanel() {
  const { ignorePatterns, updateIgnorePatterns, projectMetadata, updateProjectMetadata } = useProjectConfig();
  const { currentDirectory } = useDirectory();

  const [patterns, setPatterns] = useState&lt;string[]&gt;([]);
  const [newPattern, setNewPattern] = useState(&#39;&#39;);

  // Project metadata state
  const [projectName, setProjectName] = useState(&#39;&#39;);
  const [projectDescription, setProjectDescription] = useState(&#39;&#39;);
  const [projectVersion, setProjectVersion] = useState(&#39;&#39;);
  const [projectAuthor, setProjectAuthor] = useState(&#39;&#39;);

  useEffect(() =&gt; {
    setPatterns(ignorePatterns);
  }, [ignorePatterns]);

  useEffect(() =&gt; {
    if (projectMetadata) {
      setProjectName(projectMetadata.name || &#39;&#39;);
      setProjectDescription(projectMetadata.description || &#39;&#39;);
      setProjectVersion(projectMetadata.version || &#39;1.0.0&#39;);
      setProjectAuthor(projectMetadata.author || &#39;&#39;);
    }
  }, [projectMetadata]);

  const handleAddPattern = async () =&gt; {
    if (newPattern.trim()) {
      const updatedPatterns = [...patterns, newPattern.trim()];
      setPatterns(updatedPatterns);
      await updateIgnorePatterns(updatedPatterns);
      setNewPattern(&#39;&#39;);
    }
  };

  const handleRemovePattern = async (index: number) =&gt; {
    const updatedPatterns = patterns.filter((_, i) =&gt; i !== index);
    setPatterns(updatedPatterns);
    await updateIgnorePatterns(updatedPatterns);
  };

  const handleUpdateProjectMetadata = async () =&gt; {
    const metadata = {
      name: projectName.trim() || currentDirectory || &#39;Untitled Project&#39;,
      description: projectDescription.trim() || &#39;&#39;,
      version: projectVersion.trim() || &#39;1.0.0&#39;,
      author: projectAuthor.trim() || &#39;&#39;,
      lastUpdated: new Date().toISOString(),
    };

    await updateProjectMetadata(metadata);
  };

  return (
    &lt;div className=&quot;space-y-6&quot;&gt;
      &lt;Card&gt;
        &lt;CardHeader&gt;
          &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;
            &lt;Settings className=&quot;h-5 w-5&quot; /&gt;
            Project Configuration
          &lt;/CardTitle&gt;
        &lt;/CardHeader&gt;
        &lt;CardContent&gt;
          &lt;Tabs defaultValue=&quot;project&quot; className=&quot;space-y-6&quot;&gt;
            &lt;TabsList className=&quot;grid w-full grid-cols-3&quot;&gt;
              &lt;TabsTrigger value=&quot;project&quot; className=&quot;flex items-center gap-2&quot;&gt;
                &lt;FolderOpen className=&quot;h-4 w-4&quot; /&gt;
                Project Info
              &lt;/TabsTrigger&gt;
              &lt;TabsTrigger value=&quot;ignore&quot; className=&quot;flex items-center gap-2&quot;&gt;
                &lt;X className=&quot;h-4 w-4&quot; /&gt;
                Ignore Patterns
              &lt;/TabsTrigger&gt;
              &lt;TabsTrigger value=&quot;cursor&quot; className=&quot;flex items-center gap-2&quot;&gt;
                &lt;Zap className=&quot;h-4 w-4&quot; /&gt;
                Cursor Rules
              &lt;/TabsTrigger&gt;
            &lt;/TabsList&gt;

            {/* Project Information Tab */}
            &lt;TabsContent value=&quot;project&quot; className=&quot;space-y-6&quot;&gt;
              &lt;div&gt;
                &lt;h3 className=&quot;text-sm font-medium mb-4&quot;&gt;Project Information&lt;/h3&gt;

                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;
                  &lt;div className=&quot;space-y-2&quot;&gt;
                    &lt;Label htmlFor=&quot;project-name&quot;&gt;Project Name&lt;/Label&gt;
                    &lt;Input
                      id=&quot;project-name&quot;
                      value={projectName}
                      onChange={(e) =&gt; setProjectName(e.target.value)}
                      placeholder={currentDirectory || &quot;Enter project name&quot;}
                    /&gt;
                  &lt;/div&gt;

                  &lt;div className=&quot;space-y-2&quot;&gt;
                    &lt;Label htmlFor=&quot;project-version&quot;&gt;Version&lt;/Label&gt;
                    &lt;Input
                      id=&quot;project-version&quot;
                      value={projectVersion}
                      onChange={(e) =&gt; setProjectVersion(e.target.value)}
                      placeholder=&quot;1.0.0&quot;
                    /&gt;
                  &lt;/div&gt;

                  &lt;div className=&quot;space-y-2&quot;&gt;
                    &lt;Label htmlFor=&quot;project-author&quot;&gt;Author&lt;/Label&gt;
                    &lt;Input
                      id=&quot;project-author&quot;
                      value={projectAuthor}
                      onChange={(e) =&gt; setProjectAuthor(e.target.value)}
                      placeholder=&quot;Your name or organization&quot;
                    /&gt;
                  &lt;/div&gt;

                  &lt;div className=&quot;space-y-2 md:col-span-2&quot;&gt;
                    &lt;Label htmlFor=&quot;project-description&quot;&gt;Description&lt;/Label&gt;
                    &lt;Textarea
                      id=&quot;project-description&quot;
                      value={projectDescription}
                      onChange={(e) =&gt; setProjectDescription(e.target.value)}
                      placeholder=&quot;Brief description of your project&quot;
                      className=&quot;min-h-[80px]&quot;
                    /&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

                &lt;div className=&quot;mt-4&quot;&gt;
                  &lt;Button onClick={handleUpdateProjectMetadata}&gt;
                    &lt;FileText className=&quot;mr-2 h-4 w-4&quot; /&gt;
                    Update Project Info
                  &lt;/Button&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/TabsContent&gt;

            {/* Ignore Patterns Tab */}
            &lt;TabsContent value=&quot;ignore&quot; className=&quot;space-y-6&quot;&gt;
              &lt;div&gt;
                &lt;h3 className=&quot;text-sm font-medium mb-4&quot;&gt;Ignore Patterns&lt;/h3&gt;
                &lt;p className=&quot;text-xs text-muted-foreground mb-4&quot;&gt;
                  Files and directories matching these patterns will be excluded from bundles and file tracking.
                &lt;/p&gt;

                &lt;div className=&quot;flex gap-2 mb-4&quot;&gt;
                  &lt;Input
                    value={newPattern}
                    onChange={(e) =&gt; setNewPattern(e.target.value)}
                    placeholder=&quot;Add new pattern (e.g., *.log, node_modules)&quot;
                    onKeyDown={(e) =&gt; {
                      if (e.key === &#39;Enter&#39;) {
                        handleAddPattern();
                      }
                    }}
                  /&gt;
                  &lt;Button onClick={handleAddPattern} disabled={!newPattern.trim()}&gt;
                    &lt;Plus className=&quot;h-4 w-4&quot; /&gt;
                  &lt;/Button&gt;
                &lt;/div&gt;

                &lt;ScrollArea className=&quot;h-[300px] pr-4&quot;&gt;
                  &lt;div className=&quot;space-y-2&quot;&gt;
                    {patterns.length === 0 ? (
                      &lt;div className=&quot;text-center py-8 text-muted-foreground&quot;&gt;
                        &lt;X className=&quot;h-8 w-8 mx-auto mb-2 opacity-50&quot; /&gt;
                        &lt;p&gt;No ignore patterns configured&lt;/p&gt;
                        &lt;p className=&quot;text-xs&quot;&gt;Add patterns to exclude files from bundles&lt;/p&gt;
                      &lt;/div&gt;
                    ) : (
                      patterns.map((pattern, index) =&gt; (
                        &lt;div
                          key={index}
                          className=&quot;flex items-center justify-between px-3 py-2 rounded-md border bg-muted/40 hover:bg-muted/60 transition-colors&quot;
                        &gt;
                          &lt;code className=&quot;text-xs font-mono&quot;&gt;{pattern}&lt;/code&gt;
                          &lt;Button
                            variant=&quot;ghost&quot;
                            size=&quot;sm&quot;
                            onClick={() =&gt; handleRemovePattern(index)}
                            className=&quot;h-8 w-8 p-0 hover:bg-destructive/10 hover:text-destructive&quot;
                          &gt;
                            &lt;X className=&quot;h-4 w-4&quot; /&gt;
                          &lt;/Button&gt;
                        &lt;/div&gt;
                      ))
                    )}
                  &lt;/div&gt;
                &lt;/ScrollArea&gt;
              &lt;/div&gt;
            &lt;/TabsContent&gt;

            {/* Cursor Rules Tab - SIMPLIFIED */}
            &lt;TabsContent value=&quot;cursor&quot;&gt;
              &lt;CursorRulesPanel /&gt;
            &lt;/TabsContent&gt;
          &lt;/Tabs&gt;

          {/* Summary */}
          &lt;Separator className=&quot;my-6&quot; /&gt;
          &lt;div className=&quot;bg-muted/30 rounded-lg p-4&quot;&gt;
            &lt;h4 className=&quot;text-sm font-medium mb-2&quot;&gt;Configuration Summary&lt;/h4&gt;
            &lt;div className=&quot;grid grid-cols-2 gap-4 text-xs&quot;&gt;
              &lt;div&gt;
                &lt;span className=&quot;text-muted-foreground&quot;&gt;Project:&lt;/span&gt;
                &lt;span className=&quot;ml-2 font-medium&quot;&gt;
                  {projectName || currentDirectory || &#39;Untitled&#39;}
                &lt;/span&gt;
              &lt;/div&gt;
              &lt;div&gt;
                &lt;span className=&quot;text-muted-foreground&quot;&gt;Ignore Patterns:&lt;/span&gt;
                &lt;span className=&quot;ml-2 font-medium&quot;&gt;{patterns.length}&lt;/span&gt;
              &lt;/div&gt;
              &lt;div&gt;
                &lt;span className=&quot;text-muted-foreground&quot;&gt;Version:&lt;/span&gt;
                &lt;span className=&quot;ml-2 font-medium&quot;&gt;{projectVersion || &#39;1.0.0&#39;}&lt;/span&gt;
              &lt;/div&gt;
              &lt;div&gt;
                &lt;span className=&quot;text-muted-foreground&quot;&gt;Author:&lt;/span&gt;
                &lt;span className=&quot;ml-2 font-medium&quot;&gt;{projectAuthor || &#39;Not set&#39;}&lt;/span&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    &lt;/div&gt;
  );
}
</content>
    </document>

    <document>
      <source>src/components/InitializationModal.tsx</source>
      <tags>ui-components,configuration</tags>
      <metadata>
        <size>7112</size>
        <lastModified>2025-05-26T20:48:53.009Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components</directory>
      </metadata>
      <content>// src/components/InitializationModal.tsx
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from &quot;@/components/ui/dialog&quot;
import { Button } from &quot;@/components/ui/button&quot;
import { Card, CardContent } from &quot;@/components/ui/card&quot;
import { useState, useEffect } from &quot;react&quot;
import { Loader2, AlertCircle, CheckCircle, Zap, Settings, FolderOpen } from &quot;lucide-react&quot;
import { Alert, AlertDescription, AlertTitle } from &quot;@/components/ui/alert&quot;
import type { FileSystemDirectoryHandle } from &quot;@/types/types&quot;
import { initializeProject } from &#39;../utils/project-utils&#39;

interface InitializationModalProps {
  isOpen: boolean;
  onComplete: () =&gt; void;
  dirHandle: FileSystemDirectoryHandle;
  forceAppUpdate: () =&gt; void;  // New prop to force parent update
}

type Status = &#39;idle&#39; | &#39;loading&#39; | &#39;error&#39; | &#39;success&#39; | &#39;loading-app&#39;;

export function InitializationModal({
  isOpen,
  onComplete,
  dirHandle,
  forceAppUpdate
}: InitializationModalProps) {
  const [status, setStatus] = useState&lt;Status&gt;(&#39;idle&#39;);
  const [error, setError] = useState&lt;string&gt;(&#39;&#39;);

  useEffect(() =&gt; {
    if (isOpen) {
      setStatus(&#39;idle&#39;);
      setError(&#39;&#39;);
    }
  }, [isOpen]);

  const handleInitConfig = async () =&gt; {
    setStatus(&#39;loading&#39;);
    setError(&#39;&#39;);

    try {
      await initializeProject(dirHandle);
      setStatus(&#39;success&#39;);
    } catch (error) {
      console.error(&#39;Failed to initialize project:&#39;, error);
      setError(error instanceof Error ? error.message : &#39;Failed to initialize project configuration.&#39;);
      setStatus(&#39;error&#39;);
    }
  };

  const handleComplete = async () =&gt; {
    try {
      setStatus(&#39;loading-app&#39;);

      // Force parent component to update
      forceAppUpdate();

      // Close modal
      onComplete();
    } catch (error) {
      console.error(&#39;Error completing initialization:&#39;, error);
      setError(&#39;Failed to complete initialization.&#39;);
      setStatus(&#39;error&#39;);
    }
  };

  return (
    &lt;Dialog open={isOpen}&gt;
      &lt;DialogContent className=&quot;max-w-2xl border-0 bg-transparent shadow-none p-0&quot;&gt;
        &lt;div className=&quot;bg-gradient-to-br from-background to-muted/20 rounded-lg p-8&quot;&gt;
          &lt;Card className=&quot;border-0 bg-background/95 backdrop-blur&quot;&gt;
            &lt;DialogHeader className=&quot;text-center pb-6 px-6 pt-6&quot;&gt;
              &lt;div className=&quot;w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;
                {status === &#39;loading-app&#39; ? (
                  &lt;Loader2 className=&quot;w-8 h-8 text-primary animate-spin&quot; /&gt;
                ) : (
                  &lt;FolderOpen className=&quot;w-8 h-8 text-primary&quot; /&gt;
                )}
              &lt;/div&gt;
              &lt;DialogTitle className=&quot;text-2xl&quot;&gt;
                {status === &#39;loading-app&#39; ? &#39;Loading Application...&#39; : &#39;Project Initialization&#39;}
              &lt;/DialogTitle&gt;
              &lt;DialogDescription className=&quot;text-base&quot;&gt;
                {status === &#39;loading-app&#39;
                  ? &#39;Setting up your workspace and loading files...&#39;
                  : &#39;Initialize this directory with Cntx to track file changes, manage tags, and create bundles for AI consumption.&#39;}
              &lt;/DialogDescription&gt;
            &lt;/DialogHeader&gt;

            &lt;CardContent className=&quot;space-y-6 px-6 pb-6&quot;&gt;
              {error &amp;&amp; (
                &lt;Alert variant=&quot;destructive&quot;&gt;
                  &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;
                  &lt;AlertDescription&gt;{error}&lt;/AlertDescription&gt;
                &lt;/Alert&gt;
              )}

              {status !== &#39;loading-app&#39; &amp;&amp; (
                &lt;&gt;
                  &lt;div className=&quot;space-y-4&quot;&gt;
                    &lt;div&gt;
                      &lt;h4 className=&quot;font-medium mb-4 text-center&quot;&gt;What This Will Do&lt;/h4&gt;
                      &lt;div className=&quot;grid gap-3&quot;&gt;
                        &lt;div className=&quot;flex items-center space-x-3 p-3 rounded-lg border bg-card/50&quot;&gt;
                          &lt;Settings className=&quot;w-5 h-5 text-blue-500 flex-shrink-0&quot; /&gt;
                          &lt;div&gt;
                            &lt;p className=&quot;text-sm font-medium&quot;&gt;Creates project structure&lt;/p&gt;
                            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;
                              Sets up a &lt;code className=&quot;bg-muted px-1 rounded&quot;&gt;.cntx&lt;/code&gt; directory with configuration and state tracking
                            &lt;/p&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;

                        &lt;div className=&quot;flex items-center space-x-3 p-3 rounded-lg border bg-card/50&quot;&gt;
                          &lt;Zap className=&quot;w-5 h-5 text-green-500 flex-shrink-0&quot; /&gt;
                          &lt;div&gt;
                            &lt;p className=&quot;text-sm font-medium&quot;&gt;Configures default settings&lt;/p&gt;
                            &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;
                              Sets up file ignore patterns and initial tag system
                            &lt;/p&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;

                  {status === &#39;success&#39; ? (
                    &lt;div className=&quot;space-y-4&quot;&gt;
                      &lt;Alert className=&quot;border-green-600 bg-green-50 dark:bg-green-900/20&quot;&gt;
                        &lt;CheckCircle className=&quot;h-4 w-4 text-green-600 dark:text-green-400&quot; /&gt;
                        &lt;AlertTitle className=&quot;text-green-800 dark:text-green-200&quot;&gt;Initialization Complete&lt;/AlertTitle&gt;
                        &lt;AlertDescription className=&quot;text-green-700 dark:text-green-300&quot;&gt;
                          Project setup is complete. Remember to check the Config tab if you need to customize ignore patterns for your project.
                        &lt;/AlertDescription&gt;
                      &lt;/Alert&gt;
                      &lt;Button
                        onClick={handleComplete}
                        className=&quot;w-full&quot;
                        size=&quot;lg&quot;
                      &gt;
                        &lt;CheckCircle className=&quot;mr-2 h-5 w-5&quot; /&gt;
                        Begin Using Cntx
                      &lt;/Button&gt;
                    &lt;/div&gt;
                  ) : (
                    &lt;Button
                      onClick={handleInitConfig}
                      disabled={status === &#39;loading&#39;}
                      className=&quot;w-full&quot;
                      size=&quot;lg&quot;
                    &gt;
                      {status === &#39;loading&#39; &amp;&amp; (
                        &lt;Loader2 className=&quot;mr-2 h-5 w-5 animate-spin&quot; /&gt;
                      )}
                      {status === &#39;loading&#39; ? &#39;Initializing Project...&#39; : &#39;Initialize Project&#39;}
                    &lt;/Button&gt;
                  )}
                &lt;/&gt;
              )}

              {status === &#39;loading-app&#39; &amp;&amp; (
                &lt;div className=&quot;py-8 text-center&quot;&gt;
                  &lt;Loader2 className=&quot;w-8 h-8 mx-auto mb-4 animate-spin text-primary&quot; /&gt;
                  &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Loading your workspace...&lt;/p&gt;
                &lt;/div&gt;
              )}
            &lt;/CardContent&gt;
          &lt;/Card&gt;
        &lt;/div&gt;
      &lt;/DialogContent&gt;
    &lt;/Dialog&gt;
  );
}
</content>
    </document>

    <document>
      <source>src/vite-env.d.ts</source>
      <tags>types-definitions,configuration</tags>
      <metadata>
        <size>38</size>
        <lastModified>2025-05-22T00:43:04.235Z</lastModified>
        <extension>ts</extension>
        <directory>src</directory>
      </metadata>
      <content>/// &lt;reference types=&quot;vite/client&quot; /&gt;
</content>
    </document>

    <document>
      <source>postcss.config.cjs</source>
      <tags>configuration,theming-styles</tags>
      <metadata>
        <size>82</size>
        <lastModified>2025-05-22T02:39:25.675Z</lastModified>
        <extension>cjs</extension>
        <directory>Root</directory>
      </metadata>
      <content>module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</content>
    </document>

    <document>
      <source>.npmignore</source>
      <tags>configuration,cli-package</tags>
      <metadata>
        <size>383</size>
        <lastModified>2025-05-22T02:29:16.100Z</lastModified>
        <extension>npmignore</extension>
        <directory>Root</directory>
      </metadata>
      <content># Source files
src/
public/
docs/

# Development files
.vscode/
.idea/
*.log
.env*
.DS_Store

# Build artifacts not needed in package
node_modules/
coverage/
.nyc_output/

# Development configs
vite.config.ts
tsconfig*.json
eslint.config.js
tailwind.config.js
postcss.config.js

# Git
.git/
.gitignore

# Only include built files and essentials
!dist/
!bin/
!README.md
!package.json
</content>
    </document>

    <document>
      <source>eslint.config.js</source>
      <tags>configuration</tags>
      <metadata>
        <size>734</size>
        <lastModified>2025-05-22T00:43:04.221Z</lastModified>
        <extension>js</extension>
        <directory>Root</directory>
      </metadata>
      <content>import js from &#39;@eslint/js&#39;
import globals from &#39;globals&#39;
import reactHooks from &#39;eslint-plugin-react-hooks&#39;
import reactRefresh from &#39;eslint-plugin-react-refresh&#39;
import tseslint from &#39;typescript-eslint&#39;

export default tseslint.config(
  { ignores: [&#39;dist&#39;] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: [&#39;**/*.{ts,tsx}&#39;],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      &#39;react-hooks&#39;: reactHooks,
      &#39;react-refresh&#39;: reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      &#39;react-refresh/only-export-components&#39;: [
        &#39;warn&#39;,
        { allowConstantExport: true },
      ],
    },
  },
)
</content>
    </document>

    <document>
      <source>tsconfig.json</source>
      <tags>configuration</tags>
      <metadata>
        <size>213</size>
        <lastModified>2025-05-22T00:43:04.235Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;files&quot;: [],
  &quot;references&quot;: [
    { &quot;path&quot;: &quot;./tsconfig.app.json&quot; },
    { &quot;path&quot;: &quot;./tsconfig.node.json&quot; }
  ],
  &quot;compilerOptions&quot;: {
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    }
  }
}
</content>
    </document>

    <document>
      <source>package.json</source>
      <tags>configuration,cli-package</tags>
      <metadata>
        <size>2444</size>
        <lastModified>2025-05-24T20:54:59.589Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;name&quot;: &quot;cntx-ui&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;version&quot;: &quot;1.0.9&quot;,
  &quot;description&quot;: &quot;File bundling and tagging tool for AI development&quot;,
  &quot;keywords&quot;: [
    &quot;ai&quot;,
    &quot;bundling&quot;,
    &quot;file-management&quot;,
    &quot;development-tools&quot;,
    &quot;codebase&quot;
  ],
  &quot;repository&quot;: {
    &quot;type&quot;: &quot;git&quot;,
    &quot;url&quot;: &quot;git+https://github.com/nothingdao/cntx-ui.git&quot;
  },
  &quot;homepage&quot;: &quot;https://github.com/nothingdao/cntx-ui#readme&quot;,
  &quot;bugs&quot;: {
    &quot;url&quot;: &quot;https://github.com/nothingdao/cntx-ui/issues&quot;
  },
  &quot;author&quot;: &quot;whaleen&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;bin&quot;: {
    &quot;cntx-ui&quot;: &quot;./bin/cntx.cjs&quot;
  },
  &quot;files&quot;: [
    &quot;dist&quot;,
    &quot;bin&quot;,
    &quot;README.md&quot;
  ],
  &quot;engines&quot;: {
    &quot;node&quot;: &quot;&gt;=16.0.0&quot;
  },
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;vite&quot;,
    &quot;build&quot;: &quot;vite build&quot;,
    &quot;build-with-types&quot;: &quot;tsc -b &amp;&amp; vite build&quot;,
    &quot;lint&quot;: &quot;eslint .&quot;,
    &quot;preview&quot;: &quot;vite preview&quot;,
    &quot;prepare&quot;: &quot;npm run build&quot;,
    &quot;start&quot;: &quot;node bin/cntx.js&quot;
  },
  &quot;dependencies&quot;: {
    &quot;@radix-ui/react-alert-dialog&quot;: &quot;^1.1.4&quot;,
    &quot;@radix-ui/react-avatar&quot;: &quot;^1.1.2&quot;,
    &quot;@radix-ui/react-checkbox&quot;: &quot;^1.1.3&quot;,
    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.4&quot;,
    &quot;@radix-ui/react-dropdown-menu&quot;: &quot;^2.1.4&quot;,
    &quot;@radix-ui/react-label&quot;: &quot;^2.1.7&quot;,
    &quot;@radix-ui/react-popover&quot;: &quot;^1.1.14&quot;,
    &quot;@radix-ui/react-progress&quot;: &quot;^1.1.7&quot;,
    &quot;@radix-ui/react-scroll-area&quot;: &quot;^1.2.2&quot;,
    &quot;@radix-ui/react-select&quot;: &quot;^2.1.4&quot;,
    &quot;@radix-ui/react-separator&quot;: &quot;^1.1.7&quot;,
    &quot;@radix-ui/react-slot&quot;: &quot;^1.1.1&quot;,
    &quot;@radix-ui/react-switch&quot;: &quot;^1.2.5&quot;,
    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.2&quot;,
    &quot;@radix-ui/react-tooltip&quot;: &quot;^1.1.6&quot;,
    &quot;@tanstack/react-query&quot;: &quot;^5.62.8&quot;,
    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,
    &quot;clsx&quot;: &quot;^2.1.1&quot;,
    &quot;console-feed&quot;: &quot;^3.6.0&quot;,
    &quot;dotenv&quot;: &quot;^16.4.7&quot;,
    &quot;express&quot;: &quot;^4.18.2&quot;,
    &quot;lucide-react&quot;: &quot;^0.469.0&quot;,
    &quot;open&quot;: &quot;^8.4.2&quot;,
    &quot;react&quot;: &quot;^18.3.1&quot;,
    &quot;react-dom&quot;: &quot;^18.3.1&quot;,
    &quot;simple-git&quot;: &quot;^3.27.0&quot;,
    &quot;tailwind-merge&quot;: &quot;^2.5.5&quot;,
    &quot;tailwindcss-animate&quot;: &quot;^1.0.7&quot;,
    &quot;zustand&quot;: &quot;^5.0.2&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@eslint/js&quot;: &quot;^9.17.0&quot;,
    &quot;@types/react&quot;: &quot;^18.3.17&quot;,
    &quot;@types/react-dom&quot;: &quot;^18.3.5&quot;,
    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.4&quot;,
    &quot;autoprefixer&quot;: &quot;^10.4.20&quot;,
    &quot;eslint&quot;: &quot;^9.17.0&quot;,
    &quot;eslint-plugin-react-hooks&quot;: &quot;^5.0.0&quot;,
    &quot;eslint-plugin-react-refresh&quot;: &quot;^0.4.16&quot;,
    &quot;globals&quot;: &quot;^15.13.0&quot;,
    &quot;postcss&quot;: &quot;^8.4.49&quot;,
    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,
    &quot;typescript&quot;: &quot;~5.6.2&quot;,
    &quot;typescript-eslint&quot;: &quot;^8.18.1&quot;,
    &quot;vite&quot;: &quot;5.4.2&quot;
  }
}
</content>
    </document>

    <document>
      <source>.gitignore</source>
      <tags>configuration</tags>
      <metadata>
        <size>1883</size>
        <lastModified>2025-05-26T20:53:40.040Z</lastModified>
        <extension>gitignore</extension>
        <directory>Root</directory>
      </metadata>
      <content># Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Build outputs
dist/
dist-ssr/
build/
*.local

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output/

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of &#39;npm pack&#39;
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env.test

# parcel-builder cache (https://parceljs.org/)
.cache/
.parcel-cache/

# Next.js build output
.next/

# Nuxt.js build / generate output
.nuxt/

# Vite build cache
.vite/

# Rollup cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# JSPM packages directory
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# microbundle cache
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of &#39;npm pack&#39;
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# parcel-builder cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Project specific
PROMPTS.md
*.local

# Test files
test-project/
example-*/
dsdfsdf
</content>
    </document>

    <document>
      <source>components.json</source>
      <tags>configuration,ui-primitives</tags>
      <metadata>
        <size>440</size>
        <lastModified>2025-05-22T00:43:04.221Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;$schema&quot;: &quot;https://ui.shadcn.com/schema.json&quot;,
  &quot;style&quot;: &quot;new-york&quot;,
  &quot;rsc&quot;: false,
  &quot;tsx&quot;: true,
  &quot;tailwind&quot;: {
    &quot;config&quot;: &quot;tailwind.config.js&quot;,
    &quot;css&quot;: &quot;src/index.css&quot;,
    &quot;baseColor&quot;: &quot;zinc&quot;,
    &quot;cssVariables&quot;: true,
    &quot;prefix&quot;: &quot;&quot;
  },
  &quot;aliases&quot;: {
    &quot;components&quot;: &quot;@/components&quot;,
    &quot;utils&quot;: &quot;@/lib/utils&quot;,
    &quot;ui&quot;: &quot;@/components/ui&quot;,
    &quot;lib&quot;: &quot;@/lib&quot;,
    &quot;hooks&quot;: &quot;@/hooks&quot;
  },
  &quot;iconLibrary&quot;: &quot;lucide&quot;
}</content>
    </document>

    <document>
      <source>tsconfig.node.json</source>
      <tags>configuration</tags>
      <metadata>
        <size>480</size>
        <lastModified>2025-05-22T00:43:04.235Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;ES2022&quot;,
    &quot;lib&quot;: [&quot;ES2023&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
  },
  &quot;include&quot;: [&quot;vite.config.ts&quot;]
}
</content>
    </document>

    <document>
      <source>tailwind.config.js</source>
      <tags>configuration,theming-styles</tags>
      <metadata>
        <size>1544</size>
        <lastModified>2025-05-22T00:43:04.235Z</lastModified>
        <extension>js</extension>
        <directory>Root</directory>
      </metadata>
      <content>/** @type {import(&#39;tailwindcss&#39;).Config} */
module.exports = {
    darkMode: [&quot;class&quot;],
    content: [&quot;./index.html&quot;, &quot;./src/**/*.{ts,tsx,js,jsx}&quot;],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: &#39;var(--radius)&#39;,
  			md: &#39;calc(var(--radius) - 2px)&#39;,
  			sm: &#39;calc(var(--radius) - 4px)&#39;
  		},
  		colors: {
  			background: &#39;hsl(var(--background))&#39;,
  			foreground: &#39;hsl(var(--foreground))&#39;,
  			card: {
  				DEFAULT: &#39;hsl(var(--card))&#39;,
  				foreground: &#39;hsl(var(--card-foreground))&#39;
  			},
  			popover: {
  				DEFAULT: &#39;hsl(var(--popover))&#39;,
  				foreground: &#39;hsl(var(--popover-foreground))&#39;
  			},
  			primary: {
  				DEFAULT: &#39;hsl(var(--primary))&#39;,
  				foreground: &#39;hsl(var(--primary-foreground))&#39;
  			},
  			secondary: {
  				DEFAULT: &#39;hsl(var(--secondary))&#39;,
  				foreground: &#39;hsl(var(--secondary-foreground))&#39;
  			},
  			muted: {
  				DEFAULT: &#39;hsl(var(--muted))&#39;,
  				foreground: &#39;hsl(var(--muted-foreground))&#39;
  			},
  			accent: {
  				DEFAULT: &#39;hsl(var(--accent))&#39;,
  				foreground: &#39;hsl(var(--accent-foreground))&#39;
  			},
  			destructive: {
  				DEFAULT: &#39;hsl(var(--destructive))&#39;,
  				foreground: &#39;hsl(var(--destructive-foreground))&#39;
  			},
  			border: &#39;hsl(var(--border))&#39;,
  			input: &#39;hsl(var(--input))&#39;,
  			ring: &#39;hsl(var(--ring))&#39;,
  			chart: {
  				&#39;1&#39;: &#39;hsl(var(--chart-1))&#39;,
  				&#39;2&#39;: &#39;hsl(var(--chart-2))&#39;,
  				&#39;3&#39;: &#39;hsl(var(--chart-3))&#39;,
  				&#39;4&#39;: &#39;hsl(var(--chart-4))&#39;,
  				&#39;5&#39;: &#39;hsl(var(--chart-5))&#39;
  			}
  		}
  	}
  },
  plugins: [require(&quot;tailwindcss-animate&quot;)],
}
</content>
    </document>

    <document>
      <source>vite.config.ts</source>
      <tags>configuration</tags>
      <metadata>
        <size>240</size>
        <lastModified>2025-05-22T00:43:04.235Z</lastModified>
        <extension>ts</extension>
        <directory>Root</directory>
      </metadata>
      <content>import path from &#39;path&#39;
import react from &#39;@vitejs/plugin-react&#39;
import { defineConfig } from &#39;vite&#39;

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      &#39;@&#39;: path.resolve(__dirname, &#39;./src&#39;),
    },
  },
})
</content>
    </document>

    <document>
      <source>tsconfig.node.tsbuildinfo</source>
      <tags>configuration</tags>
      <metadata>
        <size>47</size>
        <lastModified>2025-05-22T02:29:37.202Z</lastModified>
        <extension>tsbuildinfo</extension>
        <directory>Root</directory>
      </metadata>
      <content>{&quot;root&quot;:[&quot;./vite.config.ts&quot;],&quot;version&quot;:&quot;5.6.3&quot;}</content>
    </document>

    <document>
      <source>tsconfig.app.tsbuildinfo</source>
      <tags>configuration</tags>
      <metadata>
        <size>1834</size>
        <lastModified>2025-05-22T02:29:37.045Z</lastModified>
        <extension>tsbuildinfo</extension>
        <directory>Root</directory>
      </metadata>
      <content>{&quot;root&quot;:[&quot;./src/app.tsx&quot;,&quot;./src/main.tsx&quot;,&quot;./src/vite-env.d.ts&quot;,&quot;./src/components/applicationcontainer.tsx&quot;,&quot;./src/components/bundleanalysisbadge.tsx&quot;,&quot;./src/components/bundledetailsview.tsx&quot;,&quot;./src/components/bundlemainviewer.tsx&quot;,&quot;./src/components/bundleview.tsx&quot;,&quot;./src/components/configpanel.tsx&quot;,&quot;./src/components/consolelogs.tsx&quot;,&quot;./src/components/dashboard.tsx&quot;,&quot;./src/components/directorypanel.tsx&quot;,&quot;./src/components/directorytree.tsx&quot;,&quot;./src/components/filetagsdisplay.tsx&quot;,&quot;./src/components/initializationmodal.tsx&quot;,&quot;./src/components/maincontainer.tsx&quot;,&quot;./src/components/masterbundlebutton.tsx&quot;,&quot;./src/components/statewatcher.tsx&quot;,&quot;./src/components/tagsmainviewer.tsx&quot;,&quot;./src/components/theme/mode-toggle.tsx&quot;,&quot;./src/components/theme/theme-provider.tsx&quot;,&quot;./src/components/ui/alert-dialog.tsx&quot;,&quot;./src/components/ui/alert.tsx&quot;,&quot;./src/components/ui/avatar.tsx&quot;,&quot;./src/components/ui/badge.tsx&quot;,&quot;./src/components/ui/button.tsx&quot;,&quot;./src/components/ui/card.tsx&quot;,&quot;./src/components/ui/checkbox.tsx&quot;,&quot;./src/components/ui/dialog.tsx&quot;,&quot;./src/components/ui/dropdown-menu.tsx&quot;,&quot;./src/components/ui/input.tsx&quot;,&quot;./src/components/ui/popover.tsx&quot;,&quot;./src/components/ui/progress.tsx&quot;,&quot;./src/components/ui/scroll-area.tsx&quot;,&quot;./src/components/ui/select.tsx&quot;,&quot;./src/components/ui/table.tsx&quot;,&quot;./src/components/ui/tabs.tsx&quot;,&quot;./src/components/ui/tooltip.tsx&quot;,&quot;./src/constants/index.ts&quot;,&quot;./src/contexts/bundlecontext.tsx&quot;,&quot;./src/contexts/cntxprovider.tsx&quot;,&quot;./src/contexts/directorycontext.tsx&quot;,&quot;./src/contexts/filecontext.tsx&quot;,&quot;./src/contexts/projectconfigcontext.tsx&quot;,&quot;./src/contexts/tagcontext.tsx&quot;,&quot;./src/contexts/types.ts&quot;,&quot;./src/lib/utils.ts&quot;,&quot;./src/types/types.ts&quot;,&quot;./src/utils/bundle-utils.ts&quot;,&quot;./src/utils/directory-tree.ts&quot;,&quot;./src/utils/file-state.ts&quot;,&quot;./src/utils/file-utils.ts&quot;,&quot;./src/utils/project-utils.ts&quot;],&quot;errors&quot;:true,&quot;version&quot;:&quot;5.6.3&quot;}</content>
    </document>

    <document>
      <source>tsconfig.app.json</source>
      <tags>configuration</tags>
      <metadata>
        <size>635</size>
        <lastModified>2025-05-22T00:43:04.235Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;ES2020&quot;,
    &quot;useDefineForClassFields&quot;: true,
    &quot;lib&quot;: [&quot;ES2020&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,
    &quot;jsx&quot;: &quot;react-jsx&quot;,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [
        &quot;./src/*&quot;
      ]
    }
  },
  &quot;include&quot;: [&quot;src&quot;]
}
</content>
    </document>
    
  </documents>

</bundle>